<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.mikeychowy.jazzicon</groupId>
  <artifactId>jazzicon</artifactId>
  <version>1.0.0</version>

  <properties>
    <apache.commons.lang3.version>3.18.0</apache.commons.lang3.version>
    <apache.commons.text.version>1.14.0</apache.commons.text.version>

    <colormath.version>3.6.1</colormath.version>
    <hipparchus.version>4.0.2</hipparchus.version>

    <java.version>21</java.version>
    <maven.compiler.proc>full</maven.compiler.proc>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <spotless.version>2.46.1</spotless.version>

    <test.assertj.version>3.27.6</test.assertj.version>
    <test.junit.version>5.13.4</test.junit.version>
    <test.mockito.version>5.20.0</test.mockito.version>
    <test.rainbowgum.version>0.8.2</test.rainbowgum.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>com.github.ajalt.colormath</groupId>
      <artifactId>colormath-jvm</artifactId>
      <version>${colormath.version}</version>
    </dependency>
    <dependency>
        <groupId>com.machinezoo.noexception</groupId>
        <artifactId>noexception</artifactId>
        <version>1.9.1</version>
    </dependency>
      <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>${apache.commons.lang3.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <version>${apache.commons.text.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hipparchus</groupId>
      <artifactId>hipparchus-core</artifactId>
      <version>${hipparchus.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jspecify</groupId>
      <artifactId>jspecify</artifactId>
      <version>1.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>2.0.17</version>
    </dependency>

      <!--  Test Dependencies    -->
      <dependency>
          <groupId>com.github.bgalek.security.svg</groupId>
          <artifactId>safe-svg</artifactId>
          <version>1.1.8</version>
          <scope>test</scope>
      </dependency>
    <dependency>
      <groupId>io.avaje</groupId>
      <artifactId>avaje-spi-service</artifactId>
      <version>2.9</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.jstach.rainbowgum</groupId>
      <artifactId>rainbowgum-core</artifactId>
      <version>${test.rainbowgum.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.jstach.rainbowgum</groupId>
      <artifactId>rainbowgum-pattern</artifactId>
      <version>${test.rainbowgum.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.jstach.rainbowgum</groupId>
      <artifactId>rainbowgum-slf4j</artifactId>
      <version>${test.rainbowgum.version}</version>
        <scope>test</scope>
    </dependency>
      <dependency>
          <groupId>org.apache.xmlgraphics</groupId>
          <artifactId>batik-all</artifactId>
          <version>1.19</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <version>${test.assertj.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${test.junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${test.junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-params</artifactId>
      <version>${test.junit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <version>${test.mockito.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${test.mockito.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src${file.separator}main${file.separator}resources</directory>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.14.1</version>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>io.avaje</groupId>
              <artifactId>avaje-spi-service</artifactId>
              <version>2.9</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>properties</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.5.4</version>
        <configuration>
          <argLine>@{argLine} -javaagent:${org.mockito:mockito-core:jar}</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.13</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <element>PACKAGE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>0.40</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>prepare-package</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless.version}</version>
        <configuration>
          <!-- only format files which have changed since origin/main -->
          <ratchetFrom>NONE</ratchetFrom>
          <formats>
            <!-- you can define as many formats as you want, each is independent -->
            <format>
              <!-- define the files to apply to -->
              <includes>
                <include>.gitattributes</include>
                <include>.gitignore</include>
              </includes>
              <!-- define the steps to apply to those files -->
              <trimTrailingWhitespace />
              <endWithNewline />
              <indent>
                <tabs>true</tabs>
                <spacesPerTab>4</spacesPerTab>
              </indent>
            </format>
          </formats>
          <!-- define a language-specific format -->
          <java>
            <removeUnusedImports>
              <engine>cleanthat-javaparser-unnecessaryimport</engine>
            </removeUnusedImports>
            <removeUnusedImports />
            <cleanthat>
              <version>2.24</version>
              <mutators>
                <mutator>SafeAndConsensual</mutator>
                <!-- optional. Default to 'SafeAndConsensual' to include all mutators -->
              </mutators>
              <mutators>
                <!-- List of mutators: https://github.com/solven-eu/cleanthat/blob/master/MUTATORS.generated.MD -->
                <mutator>LiteralsFirstInComparisons</mutator>
                <!-- You may alternatively list the requested mutators -->
              </mutators>
              <includeDraft>false</includeDraft>
              <!-- optional. Default to false, not to include draft mutators from Composite mutators -->
            </cleanthat>
            <palantirJavaFormat>
              <version>2.74.0</version>
              <!-- optional -->
              <style>PALANTIR</style>
              <!-- or AOSP/GOOGLE (optional) -->
              <formatJavadoc>true</formatJavadoc>
              <!-- defaults to false (optional, requires at least Palantir 2.39.0) -->
            </palantirJavaFormat>
            <formatAnnotations />
          </java>
          <pom>
            <!-- These are the defaults, you can override if you want -->
            <includes>
              <include>pom.xml</include>
            </includes>

            <sortPom>
              <encoding>UTF-8</encoding>
              <!-- The encoding of the pom files -->

              <lineSeparator>${line.separator}</lineSeparator>
              <!-- line separator to use -->

              <expandEmptyElements>false</expandEmptyElements>
              <!-- Should empty elements be expanded -->

              <spaceBeforeCloseEmptyElement>true</spaceBeforeCloseEmptyElement>
              <!-- Should a space be added inside self-closing elements -->

              <keepBlankLines>true</keepBlankLines>
              <!-- Keep empty lines -->

              <nrOfIndentSpace>2</nrOfIndentSpace>
              <!-- Indentation -->

              <indentBlankLines>false</indentBlankLines>
              <!-- Should empty lines be indented -->

              <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
              <!-- Sort order of elements: https://github.com/Ekryd/sortpom/wiki/PredefinedSortOrderProfiles -->

              <sortDependencies>scope,groupId,artifactId</sortDependencies>
              <!-- Sort dependencies: https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

              <sortDependencyManagement>none</sortDependencyManagement>
              <!-- Sort dependency management: https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

              <sortDependencyExclusions />
              <!-- Sort dependency exclusions: https://github.com/Ekryd/sortpom/wiki/SortDependencies -->

              <sortProperties>true</sortProperties>
              <!-- Sort properties -->

              <sortModules>true</sortModules>
              <!-- Sort modules -->

              <sortExecutions>true</sortExecutions>
              <!-- Sort plugin executions -->
            </sortPom>
            <!-- has its own section below -->

          </pom>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>apply</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
